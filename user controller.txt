<dependency>
<groupId>org.projectlombok</groupId>
<artifactId>lombok</artifactId>
<optional>true</optional>
</dependency>

package com.example.userdata.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String firstName;
    private String lastName;
    private String gender;
    private String dob;
    private Long phone;
    private String username;
    private String email;
    private String password;
    private String role;

    // Constructors, getters, and setters
}










package com.example.userdata.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class UserLogin {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String email;
    private String password;

    // Constructors, getters, and setters
}





package com.example.userdata.repository;

import com.example.userdata.model.User;
import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository<User, Long> {
}









package com.example.userdata.repository;

import com.example.userdata.model.UserLogin;
import org.springframework.data.jpa.repository.JpaRepository;

public interface UserLoginRepository extends JpaRepository<UserLogin, Long> {
}















package com.example.userdata.controller;

import com.example.userdata.model.User;
import com.example.userdata.model.UserLogin;
import com.example.userdata.repository.UserLoginRepository;
import com.example.userdata.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
@CrossOrigin(origins = "*")
public class UserController {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private UserLoginRepository userLoginRepository;

    @GetMapping("/users")
    public List<User> getUsers() {
        return userRepository.findAll();
    }

    @GetMapping("/c-user")
    public List<UserLogin> getUsersLogin() {
        return userLoginRepository.findAll();
    }

    @GetMapping("/users/{id}")
    public User getUser(@PathVariable Long id) {
        return userRepository.findById(id).orElse(null);
    }

    @PostMapping("/add-user")
    public User setUser(@RequestBody User user) {
        return userRepository.save(user);
    }

    @PostMapping("/login")
    public User putUsers(@RequestBody UserLogin userLogin) {
        List<User> userDB = userRepository.findAll();
        for (User ob : userDB) {
            if (ob.getEmail().equals(userLogin.getEmail()) && ob.getPassword().equals(userLogin.getPassword())) {
                return ob;
            }
        }
        User emptyUser = new User();
        emptyUser.setId(null);
        emptyUser.setFirstName("");
        emptyUser.setLastName("");
        emptyUser.setGender("");
        emptyUser.setDob("");
        emptyUser.setPhone(0L);
        emptyUser.setUsername("");
        emptyUser.setEmail("");
        emptyUser.setPassword("");
        emptyUser.setRole("");
        return emptyUser;
    }

    @PutMapping("/update-user")
    public User putMapping(@RequestBody User newUser) {
        User oldUser = userRepository.findById(newUser.getId()).orElse(null);
        if (oldUser != null) {
            oldUser.setFirstName(newUser.getFirstName());
            oldUser.setLastName(newUser.getLastName());
            oldUser.setGender(newUser.getGender());
            oldUser.setDob(newUser.getDob());
            oldUser.setPhone(newUser.getPhone());
            oldUser.setUsername(newUser.getUsername());
            oldUser.setEmail(newUser.getEmail());
            oldUser.setPassword(newUser.getPassword());
            oldUser.setRole(newUser.getRole());
            userRepository.save(oldUser);
        }
        return oldUser;
    }

    @DeleteMapping("/users/{id}")
    public String deleteUser(@PathVariable Long id) {
        userRepository.deleteById(id);
        return "Deleted user with id: " + id;
    }
}
