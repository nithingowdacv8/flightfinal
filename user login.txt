package com.example.userdata.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class User {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Integer id;

  private String firstName;
  private String lastName;
  private String gender;
  private String dob;
  private Integer phone;
  private String username;
  private String email;
  private String password;
  private String role;

}






package com.example.userdata.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class UserLogin {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Integer id;

  private String email;
  private String password;
}










package com.example.userdata.repository;

import com.example.userdata.model.User;
import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository<User, Integer> {
}





package com.example.userdata.repository;

import com.example.userdata.model.UserLogin;
import org.springframework.data.jpa.repository.JpaRepository;

public interface UserLoginRepository extends JpaRepository<UserLogin, Integer> {
}







package com.example.userdata.controller;

import com.example.userdata.model.User;
import com.example.userdata.model.UserLogin;
import com.example.userdata.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
@CrossOrigin(origins = "*")
public class UserController {

  @Autowired
  private UserRepository userRepository;

  @GetMapping("/users")
  public List<User> getUsers(){
    return userRepository.findAll();
  }

  @GetMapping("/login")
  public User login(@RequestBody UserLogin userLogin){
    User user = userRepository.findByEmail(userLogin.getEmail());
    if(user != null && user.getPassword().equals(userLogin.getPassword())){
      return user;
    }
    return null;
  }

  @PostMapping("/add-user")
  public User setUser(@RequestBody User user){
    return userRepository.save(user);
  }

  @PutMapping("/update-user")
  public User putMapping(@RequestBody User newUser){
    User oldUser = userRepository.findById(newUser.getId()).orElse(null);
    oldUser.setFirstName(newUser.getFirstName());
    oldUser.setLastName(newUser.getLastName());
    oldUser.setGender(newUser.getGender());
    oldUser.setDob(newUser.getDob());
    oldUser.setPhone(newUser.getPhone());
    oldUser.setUsername(newUser.getUsername());
    oldUser.setEmail(newUser.getEmail());
    oldUser.setPassword(newUser.getPassword());
    oldUser.setRole(newUser.getRole());
    userRepository.save(oldUser);
    return oldUser;
  }

  @DeleteMapping("/{id}")
  public String deleteUser(@PathVariable Integer id){
    userRepository.deleteById(id);
    return id.toString();
  }
}
